'use strict'; // Generated by DataJsGenerator
define([], function () {
  function GatewayData($http, prefix) {
    this.$http = $http;
    prefix = typeof prefix === 'string' ? prefix : '';
    this.resolve = {};
    var getData = function (res) {
      return res.data;
    };
    this.ApplicationController = {};
    this.ApplicationController.addHeaderRule = function (applicationId, headerRuleModel) {
      var req = {};
      req.method = 'POST';
      req.url = prefix + '/data/application/{applicationId}/newRule';
      req.url = req.url.replace(/{applicationId}/, applicationId);
      req.data = headerRuleModel;
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationController.configureHaproxySetupAndStartLoadbalancer = function (id, setup, payload) {
      var req = {};
      req.method = 'PUT';
      req.url = prefix + '/data/applications/{id}/configureHaproxySetupAndStartLoadbalancer/{setup}';
      req.url = req.url.replace(/{id}/, id);
      req.url = req.url.replace(/{setup}/, setup);
      req.data = payload;
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationController.create = function (appModel) {
      var req = {};
      req.method = 'POST';
      req.url = prefix + '/data/applications';
      req.data = appModel;
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationController.findById = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/applications/{id}/models';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationController.findEntityById = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/applications/{id}';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationController.getApplicationGroup = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/applications/{id}/application-group';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationController.getLoadBalancers = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/applications/{id}/load-balancers';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationController.listAllApps = function () {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/applications';
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationController.remove = function (id) {
      var req = {};
      req.method = 'DELETE';
      req.url = prefix + '/data/applications/{id}';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationController.removeHeaderRule = function (applicationId, headerId) {
      var req = {};
      req.method = 'DELETE';
      req.url = prefix + '/data/application/{applicationId}/removeRule/{headerId}';
      req.url = req.url.replace(/{applicationId}/, applicationId);
      req.url = req.url.replace(/{headerId}/, headerId);
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationController.search = function (name) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/applications/find/{name}';
      req.url = req.url.replace(/{name}/, name);
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationController.setStickyAndStartLoadBalancer = function (id, sticky, payload) {
      var req = {};
      req.method = 'PUT';
      req.url = prefix + '/data/applications/{id}/setSticky/{sticky}';
      req.url = req.url.replace(/{id}/, id);
      req.url = req.url.replace(/{sticky}/, sticky);
      req.data = payload;
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationController.update = function (id, appModel) {
      var req = {};
      req.method = 'PUT';
      req.url = prefix + '/data/applications/{id}';
      req.url = req.url.replace(/{id}/, id);
      req.data = appModel;
      req.params = {};
      return $http(req).then(getData);
    };
    var ApplicationController = this.ApplicationController;
    this.resolve.ApplicationController = {};
    this.resolve.ApplicationController.findById = function (GatewayData, $route) {
      return ApplicationController.findById($route.current.params.id);
    };
    this.resolve.ApplicationController.findEntityById = function (GatewayData, $route) {
      return ApplicationController.findEntityById($route.current.params.id);
    };
    this.resolve.ApplicationController.getApplicationGroup = function (GatewayData, $route) {
      return ApplicationController.getApplicationGroup($route.current.params.id);
    };
    this.resolve.ApplicationController.getLoadBalancers = function (GatewayData, $route) {
      return ApplicationController.getLoadBalancers($route.current.params.id);
    };
    this.resolve.ApplicationController.listAllApps = function (GatewayData, $route) {
      return ApplicationController.listAllApps();
    };
    this.resolve.ApplicationController.search = function (GatewayData, $route) {
      return ApplicationController.search($route.current.params.name);
    };
    this.ApplicationGroupController = {};
    this.ApplicationGroupController.changeIndexOrderOfApplications = function (appGroupId, body) {
      var req = {};
      req.method = 'PUT';
      req.url = prefix + '/data/application-groups/{appGroupId}/changeIndexOrder';
      req.url = req.url.replace(/{appGroupId}/, appGroupId);
      req.data = body;
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationGroupController.create = function (appGroupModel) {
      var req = {};
      req.method = 'POST';
      req.url = prefix + '/data/application-group';
      req.data = appGroupModel;
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationGroupController.findById = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/application-group/{id}/models';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationGroupController.findEntityById = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/application-group/{id}';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationGroupController.getApplications = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/application-groups/{id}/applications';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationGroupController.listAllAppGroups = function () {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/application-groups';
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationGroupController.remove = function (id) {
      var req = {};
      req.method = 'DELETE';
      req.url = prefix + '/data/application-groups/{id}';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationGroupController.removeApplication = function (id, appId) {
      var req = {};
      req.method = 'PUT';
      req.url = prefix + '/data/application-groups/{id}/remove-application';
      req.url = req.url.replace(/{id}/, id);
      req.data = appId;
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationGroupController.search = function (name) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/application-group/find';
      req.params = {};
      req.params.name = name;
      return $http(req).then(getData);
    };
    this.ApplicationGroupController.update = function (id, appGroupModel) {
      var req = {};
      req.method = 'PUT';
      req.url = prefix + '/data/application-groups/{id}';
      req.url = req.url.replace(/{id}/, id);
      req.data = appGroupModel;
      req.params = {};
      return $http(req).then(getData);
    };
    var ApplicationGroupController = this.ApplicationGroupController;
    this.resolve.ApplicationGroupController = {};
    this.resolve.ApplicationGroupController.findById = function (GatewayData, $route) {
      return ApplicationGroupController.findById($route.current.params.id);
    };
    this.resolve.ApplicationGroupController.findEntityById = function (GatewayData, $route) {
      return ApplicationGroupController.findEntityById($route.current.params.id);
    };
    this.resolve.ApplicationGroupController.getApplications = function (GatewayData, $route) {
      return ApplicationGroupController.getApplications($route.current.params.id);
    };
    this.resolve.ApplicationGroupController.listAllAppGroups = function (GatewayData, $route) {
      return ApplicationGroupController.listAllAppGroups();
    };
    this.resolve.ApplicationGroupController.search = function (GatewayData, $route) {
      return ApplicationGroupController.search($route.current.params.name);
    };
    this.ApplicationInstanceController = {};
    this.ApplicationInstanceController.create = function (applicationId, appInstModel) {
      var req = {};
      req.method = 'POST';
      req.url = prefix + '/data/applications/{applicationId}/instances';
      req.url = req.url.replace(/{applicationId}/, applicationId);
      req.data = appInstModel;
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationInstanceController.findById = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/instances/{id}/models';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationInstanceController.findEntityById = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/instances/{id}';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationInstanceController.listAllAppInsts = function () {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/instances';
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationInstanceController.remove = function (id) {
      var req = {};
      req.method = 'DELETE';
      req.url = prefix + '/data/instances/{id}';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationInstanceController.search = function (name) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/instances/find';
      req.params = {};
      req.params.name = name;
      return $http(req).then(getData);
    };
    this.ApplicationInstanceController.setProxyStateForInstanceAndStartLoadbalancer = function (name, proxyState, payload) {
      var req = {};
      req.method = 'PUT';
      req.url = prefix + '/data/instancesByName/{name}/state/{proxyState}';
      req.url = req.url.replace(/{name}/, name);
      req.url = req.url.replace(/{proxyState}/, proxyState);
      req.data = payload;
      req.params = {};
      return $http(req).then(getData);
    };
    this.ApplicationInstanceController.update = function (id, appInstModel) {
      var req = {};
      req.method = 'PUT';
      req.url = prefix + '/data/instances/{id}';
      req.url = req.url.replace(/{id}/, id);
      req.data = appInstModel;
      req.params = {};
      return $http(req).then(getData);
    };
    var ApplicationInstanceController = this.ApplicationInstanceController;
    this.resolve.ApplicationInstanceController = {};
    this.resolve.ApplicationInstanceController.findById = function (GatewayData, $route) {
      return ApplicationInstanceController.findById($route.current.params.id);
    };
    this.resolve.ApplicationInstanceController.findEntityById = function (GatewayData, $route) {
      return ApplicationInstanceController.findEntityById($route.current.params.id);
    };
    this.resolve.ApplicationInstanceController.listAllAppInsts = function (GatewayData, $route) {
      return ApplicationInstanceController.listAllAppInsts();
    };
    this.resolve.ApplicationInstanceController.search = function (GatewayData, $route) {
      return ApplicationInstanceController.search($route.current.params.name);
    };
    this.LoadBalancerController = {};
    this.LoadBalancerController.addApplication = function (id, applicationId) {
      var req = {};
      req.method = 'PUT';
      req.url = prefix + '/data/load-balancers/{id}/applications';
      req.url = req.url.replace(/{id}/, id);
      req.data = applicationId;
      req.params = {};
      return $http(req).then(getData);
    };
    this.LoadBalancerController.create = function (loadBalancerModel) {
      var req = {};
      req.method = 'POST';
      req.url = prefix + '/data/load-balancers';
      req.data = loadBalancerModel;
      req.params = {};
      return $http(req).then(getData);
    };
    this.LoadBalancerController.findById = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/load-balancers/{id}/models';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.LoadBalancerController.findBySshKey = function (sshKey) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/load-balancers/findBySsh/{sshKey}';
      req.url = req.url.replace(/{sshKey}/, sshKey);
      req.params = {};
      return $http(req).then(getData);
    };
    this.LoadBalancerController.findEntityById = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/load-balancers/{id}';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.LoadBalancerController.generateConfiguration = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/load-balancers/{id}/getConfigString';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.LoadBalancerController.getApplications = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/load-balancers/{id}/applications';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.LoadBalancerController.listAllLoadBalancers = function () {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/load-balancers';
      req.params = {};
      return $http(req).then(getData);
    };
    this.LoadBalancerController.remove = function (id) {
      var req = {};
      req.method = 'DELETE';
      req.url = prefix + '/data/load-balancers/{id}';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.LoadBalancerController.removeApplicationFromLoadbalancer = function (id, applicationId) {
      var req = {};
      req.method = 'PUT';
      req.url = prefix + '/data/load-balancers/{id}/remove-application';
      req.url = req.url.replace(/{id}/, id);
      req.data = applicationId;
      req.params = {};
      return $http(req).then(getData);
    };
    this.LoadBalancerController.search = function (name) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/load-balancers/find';
      req.params = {};
      req.params.name = name;
      return $http(req).then(getData);
    };
    this.LoadBalancerController.startLoadBalancer = function (id, payload) {
      var req = {};
      req.method = 'POST';
      req.url = prefix + '/data/load-balancers/{id}/start';
      req.url = req.url.replace(/{id}/, id);
      req.data = payload;
      req.params = {};
      return $http(req).then(getData);
    };
    this.LoadBalancerController.update = function (id, loadBalancerModel) {
      var req = {};
      req.method = 'PUT';
      req.url = prefix + '/data/load-balancers/{id}';
      req.url = req.url.replace(/{id}/, id);
      req.data = loadBalancerModel;
      req.params = {};
      return $http(req).then(getData);
    };
    var LoadBalancerController = this.LoadBalancerController;
    this.resolve.LoadBalancerController = {};
    this.resolve.LoadBalancerController.findById = function (GatewayData, $route) {
      return LoadBalancerController.findById($route.current.params.id);
    };
    this.resolve.LoadBalancerController.findBySshKey = function (GatewayData, $route) {
      return LoadBalancerController.findBySshKey($route.current.params.sshKey);
    };
    this.resolve.LoadBalancerController.findEntityById = function (GatewayData, $route) {
      return LoadBalancerController.findEntityById($route.current.params.id);
    };
    this.resolve.LoadBalancerController.generateConfiguration = function (GatewayData, $route) {
      return LoadBalancerController.generateConfiguration($route.current.params.id);
    };
    this.resolve.LoadBalancerController.getApplications = function (GatewayData, $route) {
      return LoadBalancerController.getApplications($route.current.params.id);
    };
    this.resolve.LoadBalancerController.listAllLoadBalancers = function (GatewayData, $route) {
      return LoadBalancerController.listAllLoadBalancers();
    };
    this.resolve.LoadBalancerController.search = function (GatewayData, $route) {
      return LoadBalancerController.search($route.current.params.name);
    };
    this.StatusController = {};
    this.StatusController.changeStatusAPI = function (lbId, statusChange) {
      var req = {};
      req.method = 'POST';
      req.url = prefix + '/data/status/checkStatusAPI/{lbId}';
      req.url = req.url.replace(/{lbId}/, lbId);
      req.data = statusChange;
      req.params = {};
      return $http(req).then(getData);
    };
    this.StatusController.getBackendStatusForApplication = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/applications/{id}/backend-status';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.StatusController.getServerStatusForApplication = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/applications/{id}/server-status';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.StatusController.getStatusForAllLoadbalancers = function () {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/all-load-alancers/status';
      req.params = {};
      return $http(req).then(getData);
    };
    this.StatusController.getStatusForLoadbalancer = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/load-balancers/{id}/status';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.StatusController.getStatusForOneServer = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/applicationInstance/{id}/status';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.StatusController.isLoadBalancerOnline = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/load-balancers/{id}/statusIsOnline';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    this.StatusController.sendEmail = function (id) {
      var req = {};
      req.method = 'GET';
      req.url = prefix + '/data/load-balancers/sendEmail/{id}';
      req.url = req.url.replace(/{id}/, id);
      req.params = {};
      return $http(req).then(getData);
    };
    var StatusController = this.StatusController;
    this.resolve.StatusController = {};
    this.resolve.StatusController.getBackendStatusForApplication = function (GatewayData, $route) {
      return StatusController.getBackendStatusForApplication($route.current.params.id);
    };
    this.resolve.StatusController.getServerStatusForApplication = function (GatewayData, $route) {
      return StatusController.getServerStatusForApplication($route.current.params.id);
    };
    this.resolve.StatusController.getStatusForAllLoadbalancers = function (GatewayData, $route) {
      return StatusController.getStatusForAllLoadbalancers();
    };
    this.resolve.StatusController.getStatusForLoadbalancer = function (GatewayData, $route) {
      return StatusController.getStatusForLoadbalancer($route.current.params.id);
    };
    this.resolve.StatusController.getStatusForOneServer = function (GatewayData, $route) {
      return StatusController.getStatusForOneServer($route.current.params.id);
    };
    this.resolve.StatusController.isLoadBalancerOnline = function (GatewayData, $route) {
      return StatusController.isLoadBalancerOnline($route.current.params.id);
    };
    this.resolve.StatusController.sendEmail = function (GatewayData, $route) {
      return StatusController.sendEmail($route.current.params.id);
    };
  }
  
  return GatewayData;
});
